#+startup: content indent
#+property: header-args :tangle "init.el"

* TODO vterm does not source .bashrc
* TODO Install doric-themes
* TODO Enable lexical binding
;; -*- lexical-binding: t; -*-
* TODO Install fontaine.el to be able to change font size dynamically.
* TODO Set automatic tangle on save for this file
* TODO Setup some treesitter parsers for most used languages
* TODO Disable jinx-mode in programming mode
* TODO Cleanup file and merge with dotfiles


* How to compile Emacs on Ubuntu
+ [[https://github.com/hubisan/emacs-wsl][How to use Emacs GUI on WSL2.]]
+ [[https://harryrschwartz.com/2022/12/08/how-i-build-emacs-from-source-on-debian][How I build Emacs from source on Debian.]]

** Dependencies
+ vterm: cmake libtool-bin
+ jinx: libenchant-2-dev pkgconf

* Notes

[[https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/][Protesilaos Basic Emacs Configuration]]

Use =org-babel-demarcate-block= to easily split a large code block
into smaller ones.

To filter a Dired buffer:
  + =% m= marks files whose names mark a regexp.
  + =t= toggles which files are marked.
  + =k= kills the lines containing marked files.
  + =g= to revert to the base view.

* early-init.el

The code below prevents =package.el= from loading packages before the
init-file is loaded (see [[https://github.com/radian-software/straight.el?tab=readme-ov-file#getting-started][straight.el's documentation]]).

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq package-enable-at-startup nil)
#+end_src

* init.el
** Initialize straight.el and use-package
*** [[https://github.com/radian-software/straight.el][straight.el]]

This code boostraps =straight.el=.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

*** [[https://github.com/jwiegley/use-package][use-package]]

The use-package macro allows you to isolate package configuration in
your .emacs file in a way that is both performance-oriented and tidy.

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

We configure =straight.el= to add a leading space to the
=straight-process-buffer= variable to ensure the buffer is
hidden. Additionally, we kill the initial =*straight-process*= buffer,
as the leading space does not seem to be applied to it, causing it to
remain visible.

#+begin_src emacs-lisp
  (use-package straight
    :ensure nil
    :custom (straight-process-buffer " *straight-process*")
    :config
    (when (get-buffer "*straight-process*")
      (kill-buffer "*straight-process*")))
#+end_src

*** [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]

A GNU Emacs library to ensure environment variables inside Emacs look
the same as in the user's shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :custom ((exec-path-from-shell-arguments '("-l") "Remove -i flag to use a faster, non-interactive shell."))
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

** Appearance

Make sure the initial frame is maximized.

#+begin_src emacs-lisp
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

Keep only the scratch buffer.

#+begin_src emacs-lisp
  (setq-default inhibit-startup-screen t)
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
#+end_src

Disable the sroll bar.

#+begin_src emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :custom ((scroll-bar-mode nil)))
#+end_src

Disable the tool bar.

#+begin_src emacs-lisp
  (use-package tool-bar
    :ensure nil
    :custom ((tool-bar-mode nil)))
#+end_src

Disable the menu bar.

#+begin_src emacs-lisp
  (use-package menu-bar
    :ensure nil
    :custom ((menu-bar-mode nil)))
#+end_src

Disable the bell sound and the flash.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

Set the font to be our beloved [[https://typeof.net/Iosevka/][Iosevka]].

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family  "Iosevka Extended"
                      :height  140
                      :weight 'normal
                      :width  'wide)
#+end_src

Treat all themes as safe.

#+begin_src emacs-lisp
  (setq custom-safe-themes t)
#+end_src

Disable hard-wrapping of long lines.

#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

Set the fringes (the grey borders on the left and right sides) to 5 be
pixels instead of 8.

#+begin_src emacs-lisp
  (when (display-graphic-p) 
    (fringe-mode 5)
    )
#+end_src

Enable a mode which will highlight the line the cursor is on.

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src

** Editing

Restore some disabled commands.

#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src

Replace the selected region when inserting text.

#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

Enable =winner-mode=, a global minor mode which allows undo and redo
operations on windows with =Ctrl-c <Left>= and =Ctrl-c <Right>=.

#+begin_src emacs-lisp
  (use-package winner
    :ensure nil
    :custom ((winner-mode 1 "Enable winner-mode")))
#+end_src

** Time and battery

#+begin_src emacs-lisp
  (use-package time
    :commands world-clock
    :init
    (add-to-list 'tab-bar-format 'tab-bar-format-align-right 'append)
    (add-to-list 'tab-bar-format 'tab-bar-format-global 'append)
    :config
    (setq display-time-format "%d-%m-%Y %H:%M")
    (setq display-time-interval 60)
    (setq display-time-mail-directory nil)
    (setq display-time-default-load-average nil)
    :hook (after-init . display-time-mode))

  (use-package battery
    :hook (after-init . display-battery-mode))

  (setopt global-mode-string '("" display-time-string battery-mode-line-string))
#+end_src

** Tabs

#+begin_src emacs-lisp
  (defvar my/tab-numbers-alist
    '((0 . "0.")
      (1 . "1.")
      (2 . "2.")
      (3 . "3.")
      (4 . "4.")
      (5 . "5.")
      (6 . "6.")
      (7 . "7.")
      (8 . "8.")
      (9 . "9."))
    "Alist of integers to strings.")

  (defun my/tab-bar-tab-name-format-default (tab i)
    (let ((current-p (eq (car tab) 'current-tab))
          (tab-num (if (and tab-bar-tab-hints (< i 10))
                       (alist-get i my/tab-numbers-alist) "")))
      (propertize
       (concat " " tab-num " " (alist-get 'name tab) " ")
       'face (funcall tab-bar-tab-face-function tab))))
#+end_src

#+begin_src emacs-lisp
  (use-package tab-bar
    :ensure nil

    :init
    (setq tab-bar-tab-name-format-function #'my/tab-bar-tab-name-format-default)

    :config
    (tab-bar-mode 1)
    (setq tab-bar-separator " ")
    (setq tab-bar-tab-hints t)

    :custom
    (tab-bar-format '(tab-bar-format-tabs
                      tab-bar-separator
                      tab-bar-format-align-right
                      tab-bar-format-global))

    :bind
    (("C-c t n" . tab-new)
     ("C-c t k" . tab-close)
     ("C-c t f" . tab-next)
     ("C-c t p" . tab-previous)
     ("C-c t 1" . (lambda () (interactive) (tab-bar-select-tab 1)))
     ("C-c t 2" . (lambda () (interactive) (tab-bar-select-tab 2)))
     ("C-c t 3" . (lambda () (interactive) (tab-bar-select-tab 3)))
     ("C-c t 4" . (lambda () (interactive) (tab-bar-select-tab 4)))
     ("C-c t 5" . (lambda () (interactive) (tab-bar-select-tab 5)))
     ("C-c t 6" . (lambda () (interactive) (tab-bar-select-tab 6)))
     ("C-c t 7" . (lambda () (interactive) (tab-bar-select-tab 7)))
     ("C-c t 8" . (lambda () (interactive) (tab-bar-select-tab 8)))
     ("C-c t 9" . (lambda () (interactive) (tab-bar-select-tab 9)))))
#+end_src

** File management

#+begin_src emacs-lisp
  (use-package files
    :ensure nil
    :custom ((make-backup-files nil "Do not make backup files on save buffer.")
  	   (auto-save-default nil "Do not auto-save of every file-visiting buffer.")
  	   (create-lockfiles  nil "Do not use lock-files.")
  	   (require-final-newline t "Ends file with a newline.")
  	   (delete-by-moving-to-trash t "Use the system's trash can"))
    :hook (before-save . #'delete-trailing-whitespace))
#+end_src

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config (put 'dired-find-alternate-file 'disabled nil)
    :custom (dired-dwim-target t "Make Dired try to guess a default target directory."))
#+end_src

** Keybindings

Enable =which-key-mode= which is part of Emacs as of Emacs 30.

#+begin_src emacs-lisp
  (which-key-mode 1)
#+end_src

Disable right =option= key to avoid conflict with my =qwerty-fr=
keyboard layout.

#+begin_src emacs-lisp
  (setq mac-right-option-modifier nil)
#+end_src

Unbind =suspend-frame= since it is annoying and not useful to me.

#+begin_src emacs-lisp
  (global-unset-key "\C-z")
#+end_src

Unbind =save-buffers-kill-terminal= since it is really easy to type inadvertently.

#+begin_src emacs-lisp
  (global-unset-key "\C-x\ \C-c")
#+end_src

** Org

=org-startup-with-inline-images= can be toggled on a file per file
basis using =#+STARTUP: inlineimages= or =#+STARTUP: noinlineimages=

#+begin_src emacs-lisp
  (use-package org
    :straight t
    :config
    (setq org-M-RET-may-split-line '((default . nil)))
    (setq org-insert-heading-respect-content t)
    (setq org-confirm-babel-evaluate nil)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-tags-column -80)
    (setq org-startup-with-inline-images t)
    (setq org-directory "~/Documents/Notes/")
    (setq my-org-agenda-file "20250218T124152--agenda__meta.org")
    (setq org-agenda-files (list (concat org-directory my-org-agenda-file)))
    :hook (dired-mode . dired-hide-details-mode))
#+end_src

** Packages
*** [[https://github.com/protesilaos/ef-themes][ef-themes]] / [[https://github.com/protesilaos/doric-themes][doric-themes]]

#+begin_src emacs-lisp
  (use-package ef-themes
    :straight t)

  (use-package doric-themes
    :straight (doric-themes :type git :host github :repo "protesilaos/doric-themes"))

#+end_src

*** [[https://github.com/hadronzoo/theme-changer][theme-changer]]

Given a location and day/night color themes, this file provides a
change-theme function that selects the appropriate theme based on
whether it is day or night. It will continue to change themes at
sunrise and sunset.

#+begin_src emacs-lisp
  (use-package theme-changer
    :straight t
    :config
    (setq calendar-location-name "Rennes"
          calendar-latitude 48.08
  	calendar-longitude -1.68)
    (change-theme 'doric-fire 'doric-water))
#+end_src

*** [[https://github.com/emacsmirror/lilypond][lilypond]]

Set the correct path to the LilyPond executable so that we can compile
LilyPond code blocks from org-mode.

#+begin_src emacs-lisp
  (use-package ob-lilypond
    :ensure nil
    :custom ((org-babel-lilypond-commands '("/opt/homebrew/bin/lilypond" "open" "open") "Commands to run lilypond and view or play the results.")))
#+end_src

*** [[https://gitlab.com/phillord/org-drill][org-drill]]

=org-drill= is an extension for =org-mode= which allows us to use
=.org= files to produce flashcards to be memorised using spaced repetion.

#+begin_src emacs-lisp
  (use-package org-drill
    :straight t)
#+end_src

*** [[https://github.com/minad/vertico][vertico]]

Vertico provides a performant and minimalistic vertical completion UI
based on the default completion system.

#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :custom ((vertico-mode t "Enable vertico-mode")))
#+end_src

*** [[https://github.com/minad/consult][consult]]

Consult provides search and navigation commands based on the Emacs
completion function completing-read.

#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :straight t
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
  	 ("C-s" . consult-line)
  	 ("s-f" . consult-line)
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves the
    ;; register formatting, adds thin separator lines, register sorting and hides
    ;; the window mode line.
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
    )
#+end_src

*** [[https://github.com/minad/marginalia][marginalia]]

#+begin_src emacs-lisp
  (use-package marginalia
    :straight t
    :custom ((marginalia-mode t "Enable marginalia-mode")))
#+end_src

*** [[https://github.com/Wilfred/helpful][helpful]]

Helpful is an alternative to the built-in Emacs help that provides
much more contextual information.
  
#+begin_src emacs-lisp
  (use-package helpful
    :straight t
    :bind
    (("C-h f" . helpful-callable)
     ("C-h v" . helpful-variable)
     ("C-h k" . helpful-key)
     ("C-h x" . helpful-command)
     ("C-c C-d" . helpful-at-point)
     ("C-h F" . helpful-function)))
#+end_src

*** [[https://github.com/akermu/emacs-libvterm][vterm]]

Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU
Emacs based on libvterm, a C library. As a result of using compiled
code (instead of elisp), emacs-libvterm is fully capable, fast, and it
can seamlessly handle large outputs.

#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :hook (vterm-mode . (lambda () (setq-local global-hl-line-mode nil)))
    :custom (initial-buffer-choice 'vterm))
#+end_src

*** [[https://github.com/protesilaos/denote][denote]]

Denote is a simple note-taking tool for Emacs. It is based on the idea
that notes should follow a predictable and descriptive file-naming
scheme.

#+begin_src emacs-lisp
        (use-package denote
          :straight t
          :config
          (setq denote-directory (expand-file-name "~/Documents/Notes/"))
          (setq denote-dired-directories (list (expand-file-name "~/Documents/Notes/")))
          :hook (dired-mode . denote-dired-mode))
#+end_src

*** [[https://github.com/oantolin/orderless][orderless]]

This package provides an =orderless= completion style that divides the
pattern into space-separated components, and matches candidates that
match all of the components in any order.

#+begin_src emacs-lisp
  (use-package orderless
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion))))
  (completion-category-overrides '((eglot (styles . (orderless flex))))))
#+end_src

*** [[https://github.com/minad/corfu][corfu]]

Corfu enhances in-buffer completion with a small completion popup.

#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

    ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :custom
    ;; TAB cycle if there are only few candidates
    ;; (completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function.
    ;; Try `cape-dict' as an alternative.
    (text-mode-ispell-word-completion nil)

    ;; Hide commands in M-x which do not apply to the current mode.  Corfu
    ;; commands are hidden, since they are not used via M-x. This setting is
    ;; useful beyond Corfu.
    (read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

*** [[https://github.com/susam/devil][devil]]

By default, Devil mode rebinds the comma key to activate Devil. Once
activated, Devil reads a so-called Devil key sequence from you. As you
type your Devil key sequence, Devil translates the key sequence to a
regular Emacs key sequence. If any command is bound to the translated
Emacs key sequence, Devil runs that command and then deactivates
itself.

#+begin_src emacs-lisp
  (use-package devil
    :straight t
    :config
    (global-devil-mode))
#+end_src

*** [[https://github.com/minad/jinx][jinx]]

Jinx is a fast just-in-time spell-checker for Emacs. Jinx highlights
misspelled words in the text of the visible portion of the buffer. For
efficiency, Jinx highlights misspellings lazily, recognizes window
boundaries and text folding, if any. For example, when unfolding or
scrolling, only the newly visible part of the text is checked if it
has not been checked before. Each misspelling can be corrected from a
list of dictionary words presented as a completion menu.

#+begin_src emacs-lisp
  (use-package jinx
    :straight t
    :custom ((jinx-languages "fr_FR en_US" "Dictionary language codes, as a string separated by whitespace."))
    :hook (emacs-startup . global-jinx-mode)
    :bind (("M-$" . jinx-correct)
  	 ("C-M-$" . jinx-languages)))
#+end_src

** Custom

This function allows us to sort CSS classes in alphabetical order,
which is especially useful when writing atomic CSS.

#+begin_src emacs-lisp
(defun my-html-sort-classes ()
  "Sort CSS classes in alphabetical order in an HTML document."
  (interactive)
  (save-excursion
    (while (search-forward "class=\"" nil t)
      (setq begin (point))
      (setq end (- (search-forward "\"" nil t) 1))
      (sort-regexp-fields nil "\\(\\sw\\|\\s_\\)+" "\\&" begin end))))

    (with-eval-after-load 'mhtml-mode
      (keymap-set mhtml-mode-map "C-c f" 'my-html-sort-classes))
#+end_src

This function allows us to create a =.pdf= file from Dired using the
marked files.

#+begin_src emacs-lisp
  (defun my-dired-image-to-pdf ()
    "In a Dired buffer, this function creates a PDF file from the marked
  image files using ImageMagick."
    (interactive)
    (setq filename (read-string "Enter filename: "))
    (shell-command (format "magick %s -quality 75 %s.pdf" (mapconcat 'identity (dired-get-marked-files) " ") filename))
    (revert-buffer))
#+end_src

This function allows us to create a backup of our files from inside
Emacs.

#+begin_src emacs-lisp
  (defun my-create-backup ()
    "Create a tar archive of specified directories with a name based on the
  current date and time."
    (interactive)
    (let* ((tar-flags "-cf")
           (backup-dir "/Users/matthieu/Sauvegardes")
           (backup-name (format "%s/%s.tar" backup-dir (format-time-string "%y-%m-%d-%H%M%S")))
           (backup-files '("/Users/matthieu/Documents"
                           "/Users/matthieu/.emacs.d")))
      (let ((process (apply 'start-process "Archive" nil "tar" tar-flags backup-name backup-files)))
        (set-process-sentinel process
                              (lambda (proc event)
                                (if (eq (process-status proc) 'exit)
                                    (let ((exit-code (process-exit-status proc)))
                                      (if (eq exit-code 0)
                                          (message "Archive has been created successfully.")
                                        (message "Error creating archive. Exit code: %d" exit-code)))
                                  (message "Process is still running...")))))))
#+end_src

These functions allow me to control Plex Media Server from Emacs.

#+begin_src emacs-lisp
  (defun my-start-plex-and-caffeinate ()
    (interactive)
    "Starts Plex Media Server and caffeinate"
    (start-process "Plex" nil "open" "/Applications/Plex Media Server.app")
    (start-process "caffeinate" nil "caffeinate"))

  (defun my-stop-plex-and-caffeinate ()
    (interactive)
    "Stops Plex Media Server and caffeinate"
    (setq plex-pid (string-to-number
                    (shell-command-to-string "pgrep 'Plex Media Server'"))
  	caffeinate-pid (string-to-number
  			(shell-command-to-string "pgrep 'caffeinate'")))
    (shell-command (format "kill -9 %s %s" plex-pid caffeinate-pid) nil nil))
#+end_src

This function allow me to sort all headings in an org-mode buffer.

#+begin_src emacs-lisp
    (defun my-org-sort-all ()
      "Sort all headings in the buffer by tags, then by TODO order, align all
    the tags and collapse all subtrees."
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (org-sort-entries t ?r nil nil "TAGS")
        (goto-char (point-min))
        (org-sort-entries t ?o)
        (org-align-tags t)
        (org-overview)))

    (add-hook 'before-save-hook
              (lambda ()
                (when (and (eq major-mode 'org-mode)
                           (member (file-name-nondirectory (buffer-file-name))
                                   '("20250218T124152--agenda__meta.org"
                                     "20250206T163402--liste-de-course__self.org"
  				   "20250213T160103--liste-voyage__self.org")))
                  (my-org-sort-all))))
#+end_src

# Local Variables:
# jinx-local-words: "Dired"
# End:
