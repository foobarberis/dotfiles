--- DIRECTORY STRUCTURE ---

.
├── alacritty.toml
├── bin
│   ├── create-diff
│   ├── create-prompt
│   ├── deploy-git-hook.sh
│   ├── git-prompt.sh
│   ├── new-note.sh
│   └── prepare-commit-msg.sh
├── deploy.sh
├── prompt.txt
├── ssh_config
└── tmux.conf

2 directories, 11 files

--- FILE ./alacritty.toml STARTS HERE ---

[window.padding]
x = 5
y = 5

[font]
size = 16.0

[font.normal]
family = "Iosevka Term"
style = "Extended"

[font.italic]
family = "Iosevka Term"
style = "Extended Italic"

[font.bold]
family = "Iosevka Term"
style = "Heavy Extended"

[font.bold_italic]
family = "Iosevka Term"
style = "Bold Extended Italic"

[selection]
save_to_clipboard = true

--- FILE ./alacritty.toml ENDS HERE ---

--- FILE ./bin/deploy-git-hook.sh STARTS HERE ---

# Define the list of target directories
TARGET_DIRECTORIES="
    ${FOLDER_3PC}/3pc-web-back
    ${FOLDER_3PC}/3pc-devops
    ${FOLDER_3PC}/3pc-web-front
    ${FOLDER_3PC}/3pc-installer
    ${FOLDER_3PC}/mirrhia-etl
    ${FOLDER_3PC}/mirrhia-hub
    ${FOLDER_3PC}/mirrhia-report
    ${FOLDER_3PC}/microbio-connectivity
"

# Path to the Git hook file
HOOK_FILE="./bin/prepare-commit-msg"

# Iterate through each directory and deploy the Git hook
for DIR in $TARGET_DIRECTORIES; do
    if [ ! -d "$DIR" ]; then
        continue
    fi

    if [ -d "$DIR/.git" ]; then
        cp "$HOOK_FILE" "$DIR/.git/hooks/"
        chmod +x "$DIR/.git/hooks/prepare-commit-msg"
        echo "Hook deployed to $DIR"
    else
        echo "$DIR is not a Git repository"
    fi
done

--- FILE ./bin/deploy-git-hook.sh ENDS HERE ---

--- FILE ./bin/new-note.sh STARTS HERE ---

#!/bin/sh
echo "--[ @$(date +"%Y%m%dT%H%M%S") @tag @tag Title of the new note ]--"

--- FILE ./bin/new-note.sh ENDS HERE ---

--- FILE ./bin/git-prompt.sh STARTS HERE ---

# bash/zsh git prompt support
#
# Copyright (C) 2006,2007 Shawn O. Pearce <spearce@spearce.org>
# Distributed under the GNU General Public License, version 2.0.
#
# This script allows you to see repository status in your prompt.
#
# To enable:
#
#    1) Copy this file to somewhere (e.g. ~/.git-prompt.sh).
#    2) Add the following line to your .bashrc/.zshrc/.profile:
#        . ~/.git-prompt.sh   # dot path/to/this-file
#    3a) Change your PS1 to call __git_ps1 as
#        command-substitution:
#        Bash: PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
#        ZSH:  setopt PROMPT_SUBST ; PS1='[%n@%m %c$(__git_ps1 " (%s)")]\$ '
#        the optional argument will be used as format string.
#    3b) Alternatively, for a slightly faster prompt, __git_ps1 can
#        be used for PROMPT_COMMAND in Bash or for precmd() in Zsh
#        with two parameters, <pre> and <post>, which are strings
#        you would put in $PS1 before and after the status string
#        generated by the git-prompt machinery.  e.g.
#        Bash: PROMPT_COMMAND='__git_ps1 "\u@\h:\w" "\\\$ "'
#          will show username, at-sign, host, colon, cwd, then
#          various status string, followed by dollar and SP, as
#          your prompt.
#        ZSH:  precmd () { __git_ps1 "%n" ":%~$ " "|%s" }
#          will show username, pipe, then various status string,
#          followed by colon, cwd, dollar and SP, as your prompt.
#        Optionally, you can supply a third argument with a printf
#        format string to finetune the output of the branch status
#
#    See notes below about compatibility with other shells.
#
# The repository status will be displayed only if you are currently in a
# git repository. The %s token is the placeholder for the shown status.
#
# The prompt status always includes the current branch name.
#
# In addition, if you set GIT_PS1_SHOWDIRTYSTATE to a nonempty value,
# unstaged (*) and staged (+) changes will be shown next to the branch
# name.  You can configure this per-repository with the
# bash.showDirtyState variable, which defaults to true once
# GIT_PS1_SHOWDIRTYSTATE is enabled.
#
# You can also see if currently something is stashed, by setting
# GIT_PS1_SHOWSTASHSTATE to a nonempty value. If something is stashed,
# then a '$' will be shown next to the branch name.
#
# If you would like to see if there're untracked files, then you can set
# GIT_PS1_SHOWUNTRACKEDFILES to a nonempty value. If there're untracked
# files, then a '%' will be shown next to the branch name.  You can
# configure this per-repository with the bash.showUntrackedFiles
# variable, which defaults to true once GIT_PS1_SHOWUNTRACKEDFILES is
# enabled.
#
# If you would like to see the difference between HEAD and its upstream,
# set GIT_PS1_SHOWUPSTREAM="auto".  A "<" indicates you are behind, ">"
# indicates you are ahead, "<>" indicates you have diverged and "="
# indicates that there is no difference. You can further control
# behaviour by setting GIT_PS1_SHOWUPSTREAM to a space-separated list
# of values:
#
#     verbose       show number of commits ahead/behind (+/-) upstream
#     name          if verbose, then also show the upstream abbrev name
#     legacy        don't use the '--count' option available in recent
#                   versions of git-rev-list
#     git           always compare HEAD to @{upstream}
#     svn           always compare HEAD to your SVN upstream
#
# By default, __git_ps1 will compare HEAD to your SVN upstream if it can
# find one, or @{upstream} otherwise.  Once you have set
# GIT_PS1_SHOWUPSTREAM, you can override it on a per-repository basis by
# setting the bash.showUpstream config variable.
#
# You can change the separator between the branch name and the above
# state symbols by setting GIT_PS1_STATESEPARATOR. The default separator
# is SP.
#
# When there is an in-progress operation such as a merge, rebase,
# revert, cherry-pick, or bisect, the prompt will include information
# related to the operation, often in the form "|<OPERATION-NAME>".
#
# When the repository has a sparse-checkout, a notification of the form
# "|SPARSE" will be included in the prompt.  This can be shortened to a
# single '?' character by setting GIT_PS1_COMPRESSSPARSESTATE, or omitted
# by setting GIT_PS1_OMITSPARSESTATE.
#
# If you would like to see a notification on the prompt when there are
# unresolved conflicts, set GIT_PS1_SHOWCONFLICTSTATE to "yes". The
# prompt will include "|CONFLICT".
#
# If you would like to see more information about the identity of
# commits checked out as a detached HEAD, set GIT_PS1_DESCRIBE_STYLE
# to one of these values:
#
#     contains      relative to newer annotated tag (v1.6.3.2~35)
#     branch        relative to newer tag or branch (master~4)
#     describe      relative to older annotated tag (v1.6.3.1-13-gdd42c2f)
#     tag           relative to any older tag (v1.6.3.1-13-gdd42c2f)
#     default       exactly matching tag
#
# If you would like a colored hint about the current dirty state, set
# GIT_PS1_SHOWCOLORHINTS to a nonempty value. The colors are based on
# the colored output of "git status -sb".
#
# If you would like __git_ps1 to do nothing in the case when the current
# directory is set up to be ignored by git, then set
# GIT_PS1_HIDE_IF_PWD_IGNORED to a nonempty value. Override this on the
# repository level by setting bash.hideIfPwdIgnored to "false".
#
# Compatibility with other shells (beyond bash/zsh):
#
#    We require posix-ish shell plus "local" support, which is most
#    shells (even pdksh), but excluding ksh93 (because no "local").
#
#    Prompt integration might differ between shells, but the gist is
#    to load it once on shell init with '. path/to/git-prompt.sh',
#    set GIT_PS1* vars once as needed, and either place $(__git_ps1..)
#    inside PS1 once (0/1 args), or, before each prompt is displayed,
#    call __git_ps1 (2/3 args) which sets PS1 with the status embedded.
#
#    Many shells support the 1st method of command substitution,
#    though some might need to first enable cmd substitution in PS1.
#
#    When using colors, each escape sequence is wrapped between byte
#    values 1 and 2 (control chars SOH, STX, respectively), which are
#    invisible at the output, but for bash/readline they mark 0-width
#    strings (SGR color sequences) when calculating the on-screen
#    prompt width, to maintain correct input editing at the prompt.
#
#    To replace or disable the 0-width markers, set GIT_PS1_COLOR_PRE
#    and GIT_PS1_COLOR_POST to other markers, or empty (nul) to not
#    use markers. For instance, some shells support '\[' and '\]' as
#    start/end markers in PS1 - when invoking __git_ps1 with 3/4 args,
#    but it may or may not work in command substitution mode. YMMV.
#
#    If the shell doesn't support 0-width markers and editing behaves
#    incorrectly when using colors in __git_ps1, then, other than
#    disabling color, it might be solved using multi-line prompt,
#    where the git status is not at the last line, e.g.:
#      PS1='\n\w \u@\h$(__git_ps1 " (%s)")\n\$ '

# check whether printf supports -v
__git_printf_supports_v=
printf -v __git_printf_supports_v -- '%s' yes >/dev/null 2>&1

# like __git_SOH=$'\001' etc but works also in shells without $'...'
eval "$(printf '
	__git_SOH="\001" __git_STX="\002" __git_ESC="\033"
	__git_LF="\n" __git_CRLF="\r\n"
')"

# stores the divergence from upstream in $p
# used by GIT_PS1_SHOWUPSTREAM
__git_ps1_show_upstream ()
{
	local key value
	local svn_remotes="" svn_url_pattern="" count n
	local upstream_type=git legacy="" verbose="" name=""
	local LF="$__git_LF"

	# get some config options from git-config
	local output="$(git config -z --get-regexp '^(svn-remote\..*\.url|bash\.showupstream)$' 2>/dev/null | tr '\0\n' '\n ')"
	while read -r key value; do
		case "$key" in
		bash.showupstream)
			GIT_PS1_SHOWUPSTREAM="$value"
			if [ -z "${GIT_PS1_SHOWUPSTREAM}" ]; then
				p=""
				return
			fi
			;;
		svn-remote.*.url)
			svn_remotes=${svn_remotes}${value}${LF}  # URI\nURI\n...
			svn_url_pattern="$svn_url_pattern\\|$value"
			upstream_type=svn+git # default upstream type is SVN if available, else git
			;;
		esac
	done <<-OUTPUT
		$output
	OUTPUT

	# parse configuration values
	local option
	for option in ${GIT_PS1_SHOWUPSTREAM-}; do
		case "$option" in
		git|svn) upstream_type="$option" ;;
		verbose) verbose=1 ;;
		legacy)  legacy=1  ;;
		name)    name=1 ;;
		esac
	done

	# Find our upstream type
	case "$upstream_type" in
	git)    upstream_type="@{upstream}" ;;
	svn*)
		# successful svn-upstream resolution:
		# - get the list of configured svn-remotes ($svn_remotes set above)
		# - get the last commit which seems from one of our svn-remotes
		# - confirm that it is from one of the svn-remotes
		# - use $GIT_SVN_ID if set, else "git-svn"

		# get upstream from "git-svn-id: UPSTRM@N HASH" in a commit message
		# (git-svn uses essentially the same procedure internally)
		local svn_upstream="$(
			git log --first-parent -1 \
				--grep="^git-svn-id: \(${svn_url_pattern#??}\)" 2>/dev/null
		)"

		if [ -n "$svn_upstream" ]; then
			# extract the URI, assuming --grep matched the last line
			svn_upstream=${svn_upstream##*$LF}  # last line
			svn_upstream=${svn_upstream#*: }    # UPSTRM@N HASH
			svn_upstream=${svn_upstream%@*}     # UPSTRM

			case ${LF}${svn_remotes} in
			*"${LF}${svn_upstream}${LF}"*)
				# grep indeed matched the last line - it's our remote
				# default branch name for checkouts with no layout:
				upstream_type=${GIT_SVN_ID:-git-svn}
				;;
			*)
				# the commit message includes one of our remotes, but
				# it's not at the last line. is $svn_upstream junk?
				upstream_type=${svn_upstream#/}
				;;
			esac
		elif [ "svn+git" = "$upstream_type" ]; then
			upstream_type="@{upstream}"
		fi
		;;
	esac

	# Find how many commits we are ahead/behind our upstream
	if [ -z "$legacy" ]; then
		count="$(git rev-list --count --left-right \
				"$upstream_type"...HEAD 2>/dev/null)"
	else
		# produce equivalent output to --count for older versions of git
		local commits
		if commits="$(git rev-list --left-right "$upstream_type"...HEAD 2>/dev/null)"
		then
			local commit behind=0 ahead=0
			for commit in $commits
			do
				case "$commit" in
				"<"*) behind=$((behind+1)) ;;
				*)    ahead=$((ahead+1))   ;;
				esac
			done
			count="$behind	$ahead"
		else
			count=""
		fi
	fi

	# calculate the result
	if [ -z "$verbose" ]; then
		case "$count" in
		"") # no upstream
			p="" ;;
		"0	0") # equal to upstream
			p="=" ;;
		"0	"*) # ahead of upstream
			p=">" ;;
		*"	0") # behind upstream
			p="<" ;;
		*)	    # diverged from upstream
			p="<>" ;;
		esac
	else # verbose, set upstream instead of p
		case "$count" in
		"") # no upstream
			upstream="" ;;
		"0	0") # equal to upstream
			upstream="|u=" ;;
		"0	"*) # ahead of upstream
			upstream="|u+${count#0	}" ;;
		*"	0") # behind upstream
			upstream="|u-${count%	0}" ;;
		*)	    # diverged from upstream
			upstream="|u+${count#*	}-${count%	*}" ;;
		esac
		if [ -n "$count" ] && [ -n "$name" ]; then
			__git_ps1_upstream_name=$(git rev-parse \
				--abbrev-ref "$upstream_type" 2>/dev/null)
			if [ "$pcmode" = yes ] && [ "$ps1_expanded" = yes ]; then
				upstream="$upstream \${__git_ps1_upstream_name}"
			else
				upstream="$upstream ${__git_ps1_upstream_name}"
				# not needed anymore; keep user's
				# environment clean
				unset __git_ps1_upstream_name
			fi
		fi
	fi

}

# Helper function that is meant to be called from __git_ps1.  It
# injects color codes into the appropriate gitstring variables used
# to build a gitstring. Colored variables are responsible for clearing
# their own color.
__git_ps1_colorize_gitstring ()
{
	if [ -n "${ZSH_VERSION-}" ]; then
		local c_red='%F{red}'
		local c_green='%F{green}'
		local c_lblue='%F{blue}'
		local c_clear='%f'
	else
		# \001 (SOH) and \002 (STX) are 0-width substring markers
		# which bash/readline identify while calculating the prompt
		# on-screen width - to exclude 0-screen-width esc sequences.
		local c_pre="${GIT_PS1_COLOR_PRE-$__git_SOH}${__git_ESC}["
		local c_post="m${GIT_PS1_COLOR_POST-$__git_STX}"

		local c_red="${c_pre}31${c_post}"
		local c_green="${c_pre}32${c_post}"
		local c_lblue="${c_pre}1;34${c_post}"
		local c_clear="${c_pre}0${c_post}"
	fi
	local bad_color="$c_red"
	local ok_color="$c_green"
	local flags_color="$c_lblue"

	local branch_color=""
	if [ "$detached" = no ]; then
		branch_color="$ok_color"
	else
		branch_color="$bad_color"
	fi
	if [ -n "$c" ]; then
		c="$branch_color$c$c_clear"
	fi
	b="$branch_color$b$c_clear"

	if [ -n "$w" ]; then
		w="$bad_color$w$c_clear"
	fi
	if [ -n "$i" ]; then
		i="$ok_color$i$c_clear"
	fi
	if [ -n "$s" ]; then
		s="$flags_color$s$c_clear"
	fi
	if [ -n "$u" ]; then
		u="$bad_color$u$c_clear"
	fi
}

# Helper function to read the first line of a file into a variable.
# __git_eread requires 2 arguments, the file path and the name of the
# variable, in that order.
__git_eread ()
{
	test -r "$1" && IFS=$__git_CRLF read -r "$2" <"$1"
}

# see if a cherry-pick or revert is in progress, if the user has committed a
# conflict resolution with 'git commit' in the middle of a sequence of picks or
# reverts then CHERRY_PICK_HEAD/REVERT_HEAD will not exist so we have to read
# the todo file.
__git_sequencer_status ()
{
	local todo
	if test -f "$g/CHERRY_PICK_HEAD"
	then
		r="|CHERRY-PICKING"
		return 0;
	elif test -f "$g/REVERT_HEAD"
	then
		r="|REVERTING"
		return 0;
	elif __git_eread "$g/sequencer/todo" todo
	then
		case "$todo" in
		p[\ \	]|pick[\ \	]*)
			r="|CHERRY-PICKING"
			return 0
		;;
		revert[\ \	]*)
			r="|REVERTING"
			return 0
		;;
		esac
	fi
	return 1
}

# __git_ps1 accepts 0 or 1 arguments (i.e., format string)
# when called from PS1 using command substitution
# in this mode it prints text to add to bash PS1 prompt (includes branch name)
#
# __git_ps1 requires 2 or 3 arguments when called from PROMPT_COMMAND (pc)
# in that case it _sets_ PS1. The arguments are parts of a PS1 string.
# when two arguments are given, the first is prepended and the second appended
# to the state string when assigned to PS1.
# The optional third parameter will be used as printf format string to further
# customize the output of the git-status string.
# In this mode you can request colored hints using GIT_PS1_SHOWCOLORHINTS=true
__git_ps1 ()
{
	# preserve exit status
	local exit="$?"
	local pcmode=no
	local detached=no
	local ps1pc_start='\u@\h:\w '
	local ps1pc_end='\$ '
	local printf_format=' (%s)'

	case "$#" in
		2|3)	pcmode=yes
			ps1pc_start="$1"
			ps1pc_end="$2"
			printf_format="${3:-$printf_format}"
			# set PS1 to a plain prompt so that we can
			# simply return early if the prompt should not
			# be decorated
			PS1="$ps1pc_start$ps1pc_end"
		;;
		0|1)	printf_format="${1:-$printf_format}"
		;;
		*)	return "$exit"
		;;
	esac

	# ps1_expanded:  This variable is set to 'yes' if the shell
	# subjects the value of PS1 to parameter expansion:
	#
	#   * bash does unless the promptvars option is disabled
	#   * zsh does not unless the PROMPT_SUBST option is set
	#   * POSIX shells always do
	#
	# If the shell would expand the contents of PS1 when drawing
	# the prompt, a raw ref name must not be included in PS1.
	# This protects the user from arbitrary code execution via
	# specially crafted ref names.  For example, a ref named
	# 'refs/heads/$(IFS=_;cmd=sudo_rm_-rf_/;$cmd)' might cause the
	# shell to execute 'sudo rm -rf /' when the prompt is drawn.
	#
	# Instead, the ref name should be placed in a separate global
	# variable (in the __git_ps1_* namespace to avoid colliding
	# with the user's environment) and that variable should be
	# referenced from PS1.  For example:
	#
	#     __git_ps1_foo=$(do_something_to_get_ref_name)
	#     PS1="...stuff...\${__git_ps1_foo}...stuff..."
	#
	# If the shell does not expand the contents of PS1, the raw
	# ref name must be included in PS1.
	#
	# The value of this variable is only relevant when in pcmode.
	#
	# Assume that the shell follows the POSIX specification and
	# expands PS1 unless determined otherwise.  (This is more
	# likely to be correct if the user has a non-bash, non-zsh
	# shell and safer than the alternative if the assumption is
	# incorrect.)
	#
	local ps1_expanded=yes
	[ -z "${ZSH_VERSION-}" ] || eval '[[ -o PROMPT_SUBST ]]' || ps1_expanded=no
	[ -z "${BASH_VERSION-}" ] || shopt -q promptvars || ps1_expanded=no

	local repo_info rev_parse_exit_code
	repo_info="$(git rev-parse --git-dir --is-inside-git-dir \
		--is-bare-repository --is-inside-work-tree --show-ref-format \
		--short HEAD 2>/dev/null)"
	rev_parse_exit_code="$?"

	if [ -z "$repo_info" ]; then
		return "$exit"
	fi

	local LF="$__git_LF"
	local short_sha=""
	if [ "$rev_parse_exit_code" = "0" ]; then
		short_sha="${repo_info##*$LF}"
		repo_info="${repo_info%$LF*}"
	fi
	local ref_format="${repo_info##*$LF}"
	repo_info="${repo_info%$LF*}"
	local inside_worktree="${repo_info##*$LF}"
	repo_info="${repo_info%$LF*}"
	local bare_repo="${repo_info##*$LF}"
	repo_info="${repo_info%$LF*}"
	local inside_gitdir="${repo_info##*$LF}"
	local g="${repo_info%$LF*}"

	if [ "true" = "$inside_worktree" ] &&
	   [ -n "${GIT_PS1_HIDE_IF_PWD_IGNORED-}" ] &&
	   [ "$(git config --bool bash.hideIfPwdIgnored)" != "false" ] &&
	   git check-ignore -q .
	then
		return "$exit"
	fi

	local sparse=""
	if [ -z "${GIT_PS1_COMPRESSSPARSESTATE-}" ] &&
	   [ -z "${GIT_PS1_OMITSPARSESTATE-}" ] &&
	   [ "$(git config --bool core.sparseCheckout)" = "true" ]; then
		sparse="|SPARSE"
	fi

	local r=""
	local b=""
	local step=""
	local total=""
	if [ -d "$g/rebase-merge" ]; then
		__git_eread "$g/rebase-merge/head-name" b
		__git_eread "$g/rebase-merge/msgnum" step
		__git_eread "$g/rebase-merge/end" total
		r="|REBASE"
	else
		if [ -d "$g/rebase-apply" ]; then
			__git_eread "$g/rebase-apply/next" step
			__git_eread "$g/rebase-apply/last" total
			if [ -f "$g/rebase-apply/rebasing" ]; then
				__git_eread "$g/rebase-apply/head-name" b
				r="|REBASE"
			elif [ -f "$g/rebase-apply/applying" ]; then
				r="|AM"
			else
				r="|AM/REBASE"
			fi
		elif [ -f "$g/MERGE_HEAD" ]; then
			r="|MERGING"
		elif __git_sequencer_status; then
			:
		elif [ -f "$g/BISECT_LOG" ]; then
			r="|BISECTING"
		fi

		if [ -n "$b" ]; then
			:
		elif [ -h "$g/HEAD" ]; then
			# symlink symbolic ref
			b="$(git symbolic-ref HEAD 2>/dev/null)"
		else
			local head=""

			case "$ref_format" in
			files)
				if ! __git_eread "$g/HEAD" head; then
					return "$exit"
				fi

				case $head in
				"ref: "*)
					head="${head#ref: }"
					;;
				*)
					head=""
				esac
				;;
			*)
				head="$(git symbolic-ref HEAD 2>/dev/null)"
				;;
			esac

			if test -z "$head"; then
				detached=yes
				b="$(
				case "${GIT_PS1_DESCRIBE_STYLE-}" in
				(contains)
					git describe --contains HEAD ;;
				(branch)
					git describe --contains --all HEAD ;;
				(tag)
					git describe --tags HEAD ;;
				(describe)
					git describe HEAD ;;
				(* | default)
					git describe --tags --exact-match HEAD ;;
				esac 2>/dev/null)" ||

				b="$short_sha..."
				b="($b)"
			else
				b="$head"
			fi
		fi
	fi

	if [ -n "$step" ] && [ -n "$total" ]; then
		r="$r $step/$total"
	fi

	local conflict="" # state indicator for unresolved conflicts
	if [ "${GIT_PS1_SHOWCONFLICTSTATE-}" = "yes" ] &&
	   [ "$(git ls-files --unmerged 2>/dev/null)" ]; then
		conflict="|CONFLICT"
	fi

	local w=""
	local i=""
	local s=""
	local u=""
	local h=""
	local c=""
	local p="" # short version of upstream state indicator
	local upstream="" # verbose version of upstream state indicator

	if [ "true" = "$inside_gitdir" ]; then
		if [ "true" = "$bare_repo" ]; then
			c="BARE:"
		else
			b="GIT_DIR!"
		fi
	elif [ "true" = "$inside_worktree" ]; then
		if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ] &&
		   [ "$(git config --bool bash.showDirtyState)" != "false" ]
		then
			git diff --no-ext-diff --quiet || w="*"
			git diff --no-ext-diff --cached --quiet || i="+"
			if [ -z "$short_sha" ] && [ -z "$i" ]; then
				i="#"
			fi
		fi
		if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ] &&
		   git rev-parse --verify --quiet refs/stash >/dev/null
		then
			s="$"
		fi

		if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ] &&
		   [ "$(git config --bool bash.showUntrackedFiles)" != "false" ] &&
		   git ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch -- ':/*' >/dev/null 2>/dev/null
		then
			u="%${ZSH_VERSION+%}"
		fi

		if [ -n "${GIT_PS1_COMPRESSSPARSESTATE-}" ] &&
		   [ "$(git config --bool core.sparseCheckout)" = "true" ]; then
			h="?"
		fi

		if [ -n "${GIT_PS1_SHOWUPSTREAM-}" ]; then
			__git_ps1_show_upstream
		fi
	fi

	local z="${GIT_PS1_STATESEPARATOR- }"

	b=${b##refs/heads/}
	if [ "$pcmode" = yes ] && [ "$ps1_expanded" = yes ]; then
		__git_ps1_branch_name=$b
		b="\${__git_ps1_branch_name}"
	fi

	if [ -n "${GIT_PS1_SHOWCOLORHINTS-}" ]; then
		__git_ps1_colorize_gitstring
	fi

	local f="$h$w$i$s$u$p"
	local gitstring="$c$b${f:+$z$f}${sparse}$r${upstream}${conflict}"

	if [ "$pcmode" = yes ]; then
		if [ "${__git_printf_supports_v-}" != yes ]; then
			gitstring=$(printf -- "$printf_format" "$gitstring")
		else
			printf -v gitstring -- "$printf_format" "$gitstring"
		fi
		PS1="$ps1pc_start$gitstring$ps1pc_end"
	else
		printf -- "$printf_format" "$gitstring"
	fi

	return "$exit"
}

--- FILE ./bin/git-prompt.sh ENDS HERE ---

--- FILE ./bin/create-diff STARTS HERE ---

#!/usr/bin/env bash

set -euo pipefail

usage() {
  echo "Usage: $0 [base_branch]"
    echo "Generates a diff between the current branch and the specified base branch (default: main)."
    echo "The diff is saved to 'feature_diff.diff'."
    exit 1
}

main() {
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a git repository." >&2
      exit 1
      fi

      local base_branch="${1:-main}"
      local output_file="feature_diff.diff"

      echo "Fetching from origin to get the latest changes..."
      git fetch origin

      if ! git show-ref --verify --quiet "refs/remotes/origin/$base_branch"; then
        echo "Error: Base branch 'origin/$base_branch' not found." >&2
          echo "Please ensure the branch exists and you have fetched the latest changes." >&2
          exit 1
          fi

# Find the common ancestor between the current branch (HEAD) and the target base branch.
          local merge_base
          merge_base=$(git merge-base HEAD "origin/$base_branch")

          echo "Generating diff against 'origin/$base_branch'..."
          git diff "$merge_base" HEAD > "$output_file"

          echo "Feature diff saved to $output_file"
}

main "$@"

--- FILE ./bin/create-diff ENDS HERE ---

--- FILE ./bin/prepare-commit-msg.sh STARTS HERE ---

#!/bin/sh

# Get the current branch name
BRANCH_NAME=$(git branch --show-current)

# Extract the US identifier or use the full branch name if none is found
US_ID=$(echo "$BRANCH_NAME" | awk -F'/' '{if (NF > 1) {split($2, arr, "_"); print arr[1]} else {print $0}}')

# Prepend US_ID to the commit message
echo "${US_ID}: $(cat "$1")" > "$1"

--- FILE ./bin/prepare-commit-msg.sh ENDS HERE ---

--- FILE ./.bashrc STARTS HERE ---

# Terminal
export TERM='tmux-256color'

# Change cursor to a bar instead of a block
# printf '\033[6 q'

# Directories to be added to PATH
export PATH="${HOME}/.local/bin:/usr/local/bin:/opt/homebrew/bin:$PATH"

# Locale settings
# Might require you to run `sudo locale-gen en_US.UTF-8`
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# Default command for fzf
export FZF_DEFAULT_COMMAND='find . -type f -not -path "./.git/*"'

# Editor and pager
export EDITOR="nvim"
export VISUAL="$EDITOR"
export PAGER="less"

# History settings
export HISTSIZE=""
export HISTFILESIZE=""
export HISTTIMEFORMAT="%F %T "
export HISTCONTROL=ignoredups:ignorespace

# Source the script in charge of getting the branch name
. ${HOME}/.local/bin/git-prompt.sh

# Define prompt text. Shows user, host, current directory, Git branch (if
# any), and last command's exit status.
export PS1='\n--[ \u@\h \W$(__git_ps1 " (%s)") ($?) ]--\n↪ '

# Automatically correct mistyped 'cd' directories
shopt -s cdspell

# Attempts spelling correction on directory names during word completion
shopt -s dirspell

# Append to history file; do not overwrite
shopt -s histappend

# Prevent accidental overwrites when using IO redirection
set -o noclobber

### ALIASES ###

alias upd='sudo apt-get update && sudo apt-get upgrade -y && sudo apt autoremove -y && sudo apt-get clean'
alias brewupd='brew update && brew upgrade && brew cleanup'
alias pkgupd='pkg update -y && pkg upgrade -y && pkg autoclean -y'

alias l='ls -Alhp --color'

alias fvi='vi "$(fzf)"'
alias fcd='cd "$(fzf)"'
alias fls='ls "$(fzf)"'
alias fmpv='mpv --fs "$(fzf)"'

--- FILE ./.bashrc ENDS HERE ---

--- FILE ./.vimrc STARTS HERE ---

" General settings
set encoding=utf-8 " Use UTF-8 encoding
set mouse=a " Enable mouse support in all modes
set autoread " Automatically reload files changed outside Vim
set belloff=all " Disable bell sound / flash
set backspace=indent,eol,start " Make backspace work more intuitively
set nobackup noswapfile " Do not create backup or swap files

" Line numbers & display settings
set number " Show line numbers
set cursorline " Highlight the current cursor line
set scrolloff=2 " Keep at least 2 lines above/below cursor when scrolling
set laststatus=2 " Always show status line
set statusline=%F " Show full path in the status line

" Search settings
set incsearch " Enable incremental search
set hlsearch " Highlight search matches
set ignorecase " Ignore case unless search pattern contains uppercase
set smartcase " Enable smart case search
set path+=** " Enable recursive searching for filenames
set modelines=0 " Limit the number of lines checked for modelines

" Indentation & Tabs
set autoindent " Indent new lines the same as the previous line
set expandtab " Convert tabs to spaces
set tabstop=2 shiftwidth=2 softtabstop=2 " Use 2 spaces per tab

" UI Enhancements
syntax on
set listchars=eol:↲,tab:▸·,trail:•,nbsp:⎵ " Display special characters for whitespace
set showmatch " Highlight matching parentheses, brackets, braces
set ruler " Show cursor position
colorscheme default

" Clipboard
if system('uname -s') == "Darwin\n"
  " macOS
  set clipboard=unnamed
else
  "Linux
  set clipboard=unnamedplus
endif

" Wildmenu
set wildmenu " Enhance command-line completion
set wildmode=list:longest,full " Wildmode settings

" File navigation
let g:netrw_browse_split = 3 " Open netrw file explorer in a new tab
set autochdir " Change working directory to the current file
set hidden " Allow switching buffers without saving

--- FILE ./.vimrc ENDS HERE ---

--- FILE ./.gitconfig STARTS HERE ---

[core]
	editor = $EDITOR
[user]
	name = Matthieu Barberis
	email = foobarberis@gmail.com
[credential]
	helper = store
[safe]
        directory = /storage/emulated/0/Files/

--- FILE ./.gitconfig ENDS HERE ---

--- FILE ./deploy.sh STARTS HERE ---

#!/bin/bash

# Create necessary directories if they do not exist
mkdir -p "${HOME}/.ssh" \
         "${HOME}/.local/bin" \
         "${HOME}/.emacs.d" \
         "${HOME}/.config/nvim" \
         "${HOME}/.config/tmux" \
         "${HOME}/.config/alacritty"

# Deploy Bash configuration
# On macOS, .bash_profile and .profile are sourced instead of .bashrc
cp .bashrc "${HOME}/" "${HOME}/.profile" "${HOME}/.bash_profile"

# Deploy Vim configuration
cp .bashrc "${HOME}/".vimrc

# Deploy Alacritty configuration for Linux/macOS
cp ./.config/alacritty/alacritty.toml "${HOME}/.config/alacritty/"

# Deploy Vim configuration
cp .vimrc "${HOME}/"

# Deploy Tmux configuration
cp ./.config/tmux/tmux.conf "${HOME}/.config/tmux/"

# Deploy Emacs configuration (copy contents, not the folder itself)
cp -r .emacs.d/* "${HOME}/.emacs.d/"

# Deploy personal scripts
chmod +x ./bin/*
cp ./bin/* "${HOME}/.local/bin/"

# Deploy SSH configuration
cp ssh_config "${HOME}/.ssh/config"

--- FILE ./deploy.sh ENDS HERE ---

--- FILE ./ssh_config STARTS HERE ---

TCPKeepAlive=yes
ServerAliveInterval=15
ServerAliveCountMax=6
Compression=yes
ControlMaster auto
ControlPath /tmp/%r@%h:%p
ControlPersist yes

--- FILE ./ssh_config ENDS HERE ---

--- FILE ./tmux.conf STARTS HERE ---

set -g mouse on
set -g mode-keys vi
set -g default-terminal "tmux-256color"
# Make sure Tmux uses 24-bit color codes correctly
set -as terminal-overrides ",*-256color:Tc"

# Change prefix to ','
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Rebind splitting to more convenient keys
bind v split-window -h
bind h split-window -v
unbind '"'
unbind '%'

# Bind Alt + Arrow keys to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Start indexing windows and panes at 1
set -g base-index 1
setw -g pane-base-index 1

--- FILE ./tmux.conf ENDS HERE ---

